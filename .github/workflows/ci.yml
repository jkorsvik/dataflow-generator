name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install uv
        run: pip install uv
      - name: Set up cache for uv
        uses: actions/cache@v4
        with:
          path: .uv-cache
          key: uv-cache-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
      - name: Set up cache for pip
        uses: actions/cache@v4
        with:
          path: .pip-cache
          key: pip-cache-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --dev
      - name: Run mypy
        run: |
          source .venv/bin/activate
          mypy src/
        continue-on-error: true

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install uv
        run: pip install uv
      - name: Set up cache for uv
        uses: actions/cache@v4
        with:
          path: .uv-cache
          key: uv-cache-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
      - name: Set up cache for pip
        uses: actions/cache@v4
        with:
          path: .pip-cache
          key: pip-cache-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --dev
      - name: Run tests
        run: |
          source .venv/bin/activate
          python -m pytest tests/ --cov=src --cov-report=xml
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-artifacts
          path: |
            coverage.xml
            .coverage

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install uv
        run: pip install uv
      - name: Set up cache for uv
        uses: actions/cache@v4
        with:
          path: .uv-cache
          key: uv-cache-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
      - name: Set up cache for pip
        uses: actions/cache@v4
        with:
          path: .pip-cache
          key: pip-cache-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --dev
          uv pip install coverage-badge anybadge
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-artifacts
      - name: Generate coverage badge
        run: |
          source .venv/bin/activate
          coverage-badge -o coverage.svg
          COVERAGE=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          if [ "$COVERAGE" -lt 40 ]; then
            echo "Coverage below threshold: $COVERAGE%"
            exit 1
          fi
          anybadge --label=tests --value=passing --file=tests.svg --color=green
      - name: Upload badge artifacts
        uses: actions/upload-artifact@v4
        with:
          name: badge-artifacts
          path: |
            coverage.svg
            tests.svg

  publish:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [coverage]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install uv
        run: pip install uv
      - name: Set up cache for uv
        uses: actions/cache@v4
        with:
          path: .uv-cache
          key: uv-cache-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
      - name: Set up cache for pip
        uses: actions/cache@v4
        with:
          path: .pip-cache
          key: pip-cache-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
      - name: Install build tools
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --dev
          uv pip install build twine
      - name: Build package
        run: |
          source .venv/bin/activate
          python -m build
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          source .venv/bin/activate
          twine upload dist/*
